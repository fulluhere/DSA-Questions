# Problem Explaination
We are given an arithmetic expression in Reverse Polish Notation (RPN) (also called postfix notation).

In RPN, operators come after their operands.

Example: ["2","1","+","3","*"] means (2 + 1) * 3.

# Brute force approach
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        vector<string> expr = tokens;

        while (expr.size() > 1) {
            for (int i = 0; i < expr.size(); i++) {
                if (expr[i] == "+" || expr[i] == "-" || expr[i] == "*" || expr[i] == "/") {
                    int a = stoi(expr[i - 2]);
                    int b = stoi(expr[i - 1]);
                    int res = 0;

                    if (expr[i] == "+") res = a + b;
                    else if (expr[i] == "-") res = a - b;
                    else if (expr[i] == "*") res = a * b;
                    else if (expr[i] == "/") res = a / b;

                    // Replace [a, b, op] with result
                    expr.erase(expr.begin() + i - 2, expr.begin() + i + 1);
                    expr.insert(expr.begin() + (i - 2), to_string(res));
                    break;
                }
            }
        }
        return stoi(expr[0]);
    }
};

# Optimized Code
we can optimized by usig Stack by cocept of Push numbers, pop for operators, compute, push back result

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> s;

        for (const string& token : tokens) {
            if (token == "+" || token == "-" || token == "*" || token == "/") {
                int b = s.top(); s.pop();
                int a = s.top(); s.pop();
                if (token == "+") s.push(a + b);
                else if (token == "-") s.push(a - b);
                else if (token == "*") s.push(a * b);
                else s.push(a / b); // truncates toward zero
            } else {
                s.push(stoi(token));
            }
        }

        return s.top();
    }
};

# Comparison of time complexcity
Brute Force: {Time: O(n^2), Space: O(n)}
Optimized: {Time: O(n), Space: O(n)}


